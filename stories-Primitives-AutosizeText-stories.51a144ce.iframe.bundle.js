"use strict";(self.webpackChunkhubble=self.webpackChunkhubble||[]).push([[761],{"./components/stories/Primitives/AutosizeText.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,H1:()=>H1,__namedExportsOrder:()=>__namedExportsOrder,default:()=>AutosizeText_stories});var jsx_runtime=__webpack_require__("./node_modules/next/dist/compiled/react/jsx-runtime.js"),useAutosize=__webpack_require__("./components/ui/design-system/useAutosize.ts");function AutoSizedText({children}){const{childRef}=(0,useAutosize.A)();return(0,jsx_runtime.jsx)("div",{className:"inline-block",ref:childRef,children})}try{AutoSizedText.displayName="AutoSizedText",AutoSizedText.__docgenInfo={description:"",displayName:"AutoSizedText",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["components/ui/design-system/AutosizeText.tsx#AutoSizedText"]={docgenInfo:AutoSizedText.__docgenInfo,name:"AutoSizedText",path:"components/ui/design-system/AutosizeText.tsx#AutoSizedText"})}catch(__react_docgen_typescript_loader_error){}const AutosizeText_stories={title:"Primitives/AutosizeText",component:AutoSizedText,parameters:{},argTypes:{},tags:["autodocs"]},Default={args:{children:"Hello! this is a typography component"}},H1={args:{children:"30%"},decorators:[Story=>(0,jsx_runtime.jsx)("div",{className:"w-full aspect-square border",children:(0,jsx_runtime.jsx)("div",{className:"size-full border border-success",children:(0,jsx_runtime.jsx)(Story,{})})})]},__namedExportsOrder=["Default","H1"];Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  args: {\n    children: 'Hello! this is a typography component'\n  }\n}",...Default.parameters?.docs?.source}}},H1.parameters={...H1.parameters,docs:{...H1.parameters?.docs,source:{originalSource:'{\n  args: {\n    children: \'30%\'\n  },\n  decorators: [Story => <div className="w-full aspect-square border">\n        {/* ðŸ‘‡ Decorators in Storybook also accept a function. Replace <Story/> with Story() to enable it  */}\n        <div className="size-full border border-success">\n          <Story />\n        </div>\n      </div>]\n}',...H1.parameters?.docs?.source}}}},"./components/ui/design-system/useAutosize.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{A:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/next/dist/compiled/react/index.js");function getElementDimensions(element){const bbox=element.getBoundingClientRect();return{width:bbox.width,height:bbox.height}}const __WEBPACK_DEFAULT_EXPORT__=function useAutosize(){const childRef=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),fontSize=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0),fontSizeLowerBound=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0),fontSizeUpperBound=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(0);(0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)((()=>{var _childRef_current;const childElement=childRef.current,parentElement=null===(_childRef_current=childRef.current)||void 0===_childRef_current?void 0:_childRef_current.parentElement;if(!childElement||!parentElement)return;if(!window.ResizeObserver){const childDimensions=getElementDimensions(childElement),parentDimensions=getElementDimensions(parentElement);return void adjustFontSize(childDimensions,parentDimensions)}const observer=new ResizeObserver((entries=>{const entry=entries[0];if(!entry)return;const parentDimensions=entry.contentRect;fontSizeLowerBound.current=0,fontSizeUpperBound.current=parentDimensions.height;let iterationCount=0;for(;iterationCount<=20;){const childDimensions=getElementDimensions(childElement);adjustFontSize(childDimensions,parentDimensions),iterationCount+=1}}));return observer.observe(parentElement),()=>{observer.disconnect()}}),[]);const adjustFontSize=(childDimensions,parentDimensions)=>{const childElement=childRef.current;if(!childElement)return;let newFontSize;childDimensions.width>parentDimensions.width||childDimensions.height>parentDimensions.height?(newFontSize=(fontSizeLowerBound.current+fontSize.current)/2,fontSizeUpperBound.current=fontSize.current):(childDimensions.width<parentDimensions.width||childDimensions.height<parentDimensions.height)&&(newFontSize=(fontSizeUpperBound.current+fontSize.current)/2,fontSizeLowerBound.current=fontSize.current),fontSize.current=newFontSize||0,childElement.style.fontSize=`${newFontSize}px`};return{childRef}}}}]);